@using Sparta.BlazorUI.Authorization
@using Sparta.BlazorUI.Data.DiscordData
@using Sparta.BlazorUI.Entities
@using Sparta.BlazorUI.Permissions
@inject IStringLocalizer<Discord> Localizer
@inject DiscordDataService DataService
@inject IJSRuntime Js
@attribute [HasPermission(Permissions.Discord.Embed.View)]

<div class="card">
    <div class="card-header">
        <h3>Embed</h3>
    </div>
    <div class="card-body container">
        <table class="table table-striped table-hover" id="roleTable">
            <thead>
            <tr>
                <th>@Localizer["GuildName"]</th>
                <th>@Localizer["ChannelName"]</th>
                <th>@Localizer["EmbedTitle"]</th>
                <th>@Localizer["Actions"]</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var embed in embeds)
            {
                <tr>
                    @{
                        var guild = guilds.FirstOrDefault(x => x.Channels.Any(y => y.Embeds.Contains(embed)));
                        var channel = guild?.Channels.FirstOrDefault(x => x.Embeds.Contains(embed));
                    }

                    <td class="align-middle">@guild?.Name</td>
                    <td class="align-middle">@channel?.Name</td>
                    <td class="align-middle">@embed.Title</td>
                    <td class="text-right align-middle">
                        <div class="btn-group">
                            <button type="button" class="btn btn-default dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                @Localizer["Actions"]
                            </button>
                            <div class="dropdown-menu shadow animated--grow-in">
                                <AuthorizeView>
                                    @if (context.User.Authorize(Permissions.Discord.Embed.Delete))
                                    {
                                        <a style='margin-right:16px' class="dropdown-item" @onclick='() => DeleteEmbed(embed)'>@Localizer["Delete"]</a>
                                    }
                                    @if (context.User.Authorize(Permissions.Discord.Embed.Edit))
                                    {
                                        <a style='margin-right:16px' class="dropdown-item" data-bs-toggle="modal" data-bs-target="#manageEmbed" @onclick='() => LoadEmbedData(embed.Id)'>@Localizer["EditEmbed"]</a>
                                    }
                                    @if (context.User.Authorize(Permissions.Discord.Embed.Create))
                                    {
                                        <a style='margin-right:16px' class="dropdown-item" data-bs-toggle="modal" data-bs-target="#manageEmbed" @onclick='() => DuplicateEmbed(embed.Id)'>@Localizer["DuplicateEmbed"]</a>
                                    }
                                </AuthorizeView>
                            </div>
                        </div>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
    <AuthorizeView>
        @if (context.User.Authorize(Permissions.UserManagement.Create))
        {
            <div class="card-footer">
                <div class="input-group">
                    <select class="form-select" @bind=selectedGuildId>
                        <option selected>@Localizer["SelectGuild"]</option>
                        @foreach (var guild in guilds)
                        {
                            <option value="@guild.Id">@guild.Name</option>
                        }
                    </select>
                    <select class="form-select" @bind=selectedChannelId>
                        <option selected>@Localizer["SelectChanel"]</option>
                        @{
                            var selectedGuild = guilds.FirstOrDefault(x => x.Id == Convert.ToUInt64(selectedGuildId));
                            var channels = selectedGuild != null ? selectedGuild.Channels : guilds.SelectMany(x => x.Channels, (x, y) => y);

                            foreach (var channel in channels.Where(x => x.Type == "Text"))
                            {
                                <option value="@channel.Id">@channel.Name</option>
                            }
                        }
                    </select>
                    <button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#manageEmbed" @onclick=CreateEmbed>@Localizer["AddEmbed"]</button>
                </div>
            </div>
        }
    </AuthorizeView>
</div>

<div class="modal fade" id="manageEmbed" data-bs-keyboard="false" data-bs-backdrop="static" aria-hidden="true" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Localizer["EditEmbed"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (embed != null)
                {
                    <div class="input-group mb-3">
                        <span class="input-group-text">@Localizer["Author"]</span>
                        <select class="form-select" @bind=selectedAuthorId>
                            <option selected>@Localizer["SelectAuthor"]</option>
                            @foreach (var author in authors)
                            {
                                <option value="@author.Id">@author.Name</option>
                            }
                        </select>
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">@Localizer["EmbedTitle"]</span>
                        <input type="text" class="form-control" @bind=embed.Title>
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">@Localizer["EmbedDescription"]</span>
                        <textarea class="form-control" @bind=embed.Description></textarea>
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">@Localizer["EmbedColor"]</span>
                        <input type="color" class="form-control form-control-color" @bind=embed.ColorHtml>
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">@Localizer["EmbedFooter"]</span>
                        <span class="input-group-text">@Localizer["EmbedFooterName"]</span>
                        <input class="form-control" @bind=embed.FooterText></input>
                        <span class="input-group-text">@Localizer["EmbedFooterIconUrl"]</span>
                        <input class="form-control" @bind=embed.FooterIconUrl></input>
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">@Localizer["EmbedImageUrl"]</span>
                        <input class="form-control" @bind=embed.ImageUrl></input>
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">@Localizer["EmbedThumbnailUrl"]</span>
                        <input class="form-control" @bind=embed.ThumbnailUrl></input>
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">@Localizer["EmbedUrl"]</span>
                        <input class="form-control" @bind=embed.Url></input>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">@Localizer["EmbedFields"]</label>
                        @foreach (var field in embed.Fields)
                        {
                            <div class="input-group">
                                <span class="input-group-text mt-0">@Localizer["EmbedField"]</span>
                                <label class="btn btn-outline-primary align-middle" for="@($"check{field.Name}{field.Value}")">@Localizer["EmbedInline"]</label>
                                <input type="checkbox" class="btn-check" autocomplete="off" @bind="field.Inline" id="@($"check{field.Name}{field.Value}")"/>
                                <span class="input-group-text">@Localizer["EmbedFieldName"]</span>
                                <input type="text" class="form-control" @bind=field.Name>
                                <span class="input-group-text">@Localizer["EmbedFieldValue"]</span>
                                <input type="text" class="form-control" @bind=field.Value></input>
                                <button type="button" class="btn btn-danger" @onclick='() => DeleteField(field)'>
                                    <span class="bi bi-x"></span>
                                </button>
                            </div>
                        }
                        <div class="input-group">
                            <button type="button" class="btn btn-success" @onclick='AddField'>@Localizer["NewEmbedField"]</button>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">@Localizer["EmbedButtons"]</label>
                        @foreach (var component in embed.MessageComponents)
                        {
                            <div class="input-group">
                                <span class="input-group-text mt-0">@Localizer["Button"]</span>
                                <input type="text" class="form-control" @bind=component.Label disabled>
                                <button type="button" class="btn btn-danger" @onclick='() => DeleteComponent(component)'>
                                    <span class="bi bi-x"></span>
                                </button>
                            </div>
                        }
                        <div class="input-group">
                            <button type="button" class="btn btn-success" @onclick='AddComponent'>@Localizer["AddButton"]</button>
                            <select class="form-select" @bind=selectedComponent>
                                <option selected>@Localizer["SelectButton"]</option>
                                @foreach (var component in components)
                                {
                                    <option value="@component.Id">@component.Label</option>
                                }
                            </select>
                        </div>
                    </div>
                }
                else
                {
                    @Localizer["EmbedModalAlternateText"]
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Localizer["ModalClose"]</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="SaveEmbedAsync">@Localizer["ModalSubmit"]</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<DiscordGuild> guilds = null!;
    private List<Entities.DiscordEmbed> embeds = null!;
    private List<Entities.DiscordAuthor> authors = null!;
    private List<Entities.DiscordMessageComponent> components = null!;
    private long selectedGuildId;
    private long selectedChannelId;
    private long selectedAuthorId;
    private string? selectedComponent;
    private Entities.DiscordEmbed? embed;

    protected override void OnInitialized()
    {
        LoadData();
    }

    private void LoadData()
    {
        embeds = DataService.GetEmbeds();
        guilds = DataService.GetGuilds();
        authors = DataService.GetAuthors();
        components = DataService.GetMessageComponents();
    }

    private void DeleteEmbed(Entities.DiscordEmbed embed)
    {
        DataService.DeleteEmbed(embed);
        LoadData();
    }

    private void LoadEmbedData(long embedId)
    {
        embed = DataService.GetEmbed(embedId);
        selectedAuthorId = authors.FirstOrDefault(x => x.Embeds.Any(y => y.Id == embed?.Id))?.Id ?? 0;
    }

    private void CreateEmbed()
    {
        embed = new Entities.DiscordEmbed();
    }

    private void DuplicateEmbed(long embedId)
    {
        if (selectedChannelId != 0)
        {
            LoadEmbedData(embedId);
            if (embed == null) return;
            var newEmbed = new Entities.DiscordEmbed
            {
                Description = embed.Description,
                Title = embed.Title
            };
            newEmbed.Fields.AddRange(embed.Fields.Select(x => new DiscordEmbedFields { Name = x.Name, Value = x.Value, Inline = x.Inline }).ToList());
            embed = newEmbed;
        }
    }

    private async Task SaveEmbedAsync()
    {
        if (embed != null)
        {
            await DataService.SaveEmbedAsync(embed, selectedChannelId, selectedAuthorId);
            LoadData();
        }
    }

    private void AddField()
    {
        embed?.Fields.Add(new DiscordEmbedFields());
    }

    private void DeleteField(DiscordEmbedFields field)
    {
        embed?.Fields.Remove(field);
    }

    private void AddComponent()
    {
        if (selectedComponent != null && DataService.GetComponent(selectedComponent) is Entities.DiscordMessageComponent component)
        {
            embed?.MessageComponents.Add(component);
        }
    }

    private void DeleteComponent(Entities.DiscordMessageComponent component)
    {
        embed?.MessageComponents.Remove(component);
    }

}