@using Sparta.BlazorUI.Authorization
@using Sparta.BlazorUI.Data.DiscordData
@using Sparta.BlazorUI.Entities
@using Sparta.BlazorUI.Permissions
@inject IStringLocalizer<Discord> Localizer
@inject DiscordDataService DataService
@inject IJSRuntime Js
@attribute [HasPermission(Permissions.Discord.Modal.View)]

<div class="card">
    <div class="card-header">
        <h3>Modal</h3>
    </div>
    <div class="card-body container">
        <table class="table table-striped table-hover" id="roleTable">
            <thead>
            <tr>
                <th>@Localizer["ModalTitle"]</th>
                <th>@Localizer["ModalComponents"]</th>
                <th>@Localizer["Actions"]</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var modal in modals)
            {
                <tr>
                    <td class="align-middle">@modal.Title</td>
                    <td class="align-middle">@modal.Components.Count</td>
                    <td class="text-right align-middle">
                        <div class="btn-group">
                            <button type="button" class="btn btn-default dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                @Localizer["Actions"]
                            </button>
                            <div class="dropdown-menu shadow animated--grow-in">
                                <AuthorizeView>
                                    @if (context.User.Authorize(Permissions.Discord.Modal.Delete))
                                    {
                                        <a style='margin-right:16px' class="dropdown-item" @onclick='() => DeleteModal(modal)'>@Localizer["Delete"]</a>
                                    }
                                    @if (context.User.Authorize(Permissions.Discord.Modal.Edit))
                                    {
                                        <a style='margin-right:16px' class="dropdown-item" data-bs-toggle="modal" data-bs-target="#manageModal" @onclick='() => LoadModalData(modal)'>@Localizer["EditModal"]</a>
                                    }
                                    @if (context.User.Authorize(Permissions.Discord.Modal.Create))
                                    {
                                        <a style='margin-right:16px' class="dropdown-item" data-bs-toggle="modal" data-bs-target="#manageModal" @onclick='() => DuplicateModal(modal)'>@Localizer["DuplicateModal"]</a>
                                    }
                                </AuthorizeView>
                            </div>
                        </div>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
    <AuthorizeView>
        @if (context.User.Authorize(Permissions.Discord.Modal.Create))
        {
            <div class="card-footer">
                <button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#manageModal" @onclick=CreateModal>@Localizer["AddModal"]</button>
            </div>
        }
    </AuthorizeView>
</div>

<div class="modal fade" id="manageModal" data-bs-keyboard="false" data-bs-backdrop="static" aria-hidden="true" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Localizer["EditModal"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (modal != null)
                {
                    <div class="input-group mb-3">
                        <span class="input-group-text">@Localizer["ModalTitle"]</span>
                        <input type="text" class="form-control" @bind=modal.Title>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">@Localizer["ModalComponents"]</label>
                        @foreach (var component in modal.Components)
                        {
                            <div class="input-group">
                                <span class="input-group-text mt-0">@Localizer["ModalComponent"]</span>
                                <span class="input-group-text">@Localizer["ComponentLabel"]</span>
                                <input type="text" class="form-control" @bind=component.Label>
                                <span class="input-group-text">@Localizer["ComponentPlaceholder"]</span>
                                <input type="text" class="form-control" @bind=component.Placeholder>
                                <span class="input-group-text">@Localizer["ComponentMinLength"]</span>
                                <input type="text" class="form-control" @bind=component.MinLength>
                                <span class="input-group-text">@Localizer["ComponentMaxLength"]</span>
                                <input type="text" class="form-control" @bind=component.MaxLength>
                                <label class="btn btn-outline-primary align-middle" for="@($"check{modal.Id}{component.Id}")">@Localizer["EmbedInline"]</label>
                                <input type="checkbox" class="btn-check" autocomplete="off" @bind="component.Required" id="@($"check{modal.Id}{component.Id}")"/>
                                <span class="input-group-text">@Localizer["ComponentDefaultValue"]</span>
                                <input type="text" class="form-control" @bind=component.DefaultValue>
                                <button type="button" class="btn btn-danger" @onclick='() => DeleteComponent(component)'>
                                    <span class="bi bi-x"></span>
                                </button>
                            </div>
                        }
                        <div class="input-group">
                            <button type="button" class="btn btn-success" @onclick='AddComponent'>@Localizer["NewModalComponent"]</button>
                        </div>
                    </div>
                }
                else
                {
                    @Localizer["ModalModalAlternateText"]
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Localizer["ModalClose"]</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="SaveModal">@Localizer["ModalSubmit"]</button>
            </div>
        </div>
    </div>
</div>

@code {
    List<Entities.DiscordModal> modals = null!;
    Entities.DiscordModal? modal;

    protected override void OnInitialized()
    {
        LoadData();
    }

    private void LoadData()
    {
        modals = DataService.GetModals();
    }

    private void DeleteModal(Entities.DiscordModal modal)
    {
    }

    private void LoadModalData(Entities.DiscordModal modal)
    {
    }

    private void DuplicateModal(Entities.DiscordModal modal)
    {
    }

    private void CreateModal()
    {
        modal = new Entities.DiscordModal();
    }

    private void AddComponent()
    {
        modal?.Components.Add(new DiscordModalComponent());
    }

    private void DeleteComponent(DiscordModalComponent component)
    {
    }

    private void SaveModal()
    {
    }

}