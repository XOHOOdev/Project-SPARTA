@using Sparta.BlazorUI.Authorization
@using Sparta.BlazorUI.Data.DiscordData
@using Sparta.BlazorUI.Entities
@using Sparta.BlazorUI.Permissions
@inject IStringLocalizer<Discord> Localizer
@inject DiscordDataService DataService
@attribute [HasPermission(Permissions.Discord.Component.View)]

<div class="card">
    <div class="card-header">
        <h3>@Localizer["Button"]</h3>
    </div>
    <div class="card-body container">
        <table class="table table-striped table-hover" id="roleTable">
            <thead>
            <tr>
                <th>@Localizer["ComponentEmbedTitle"]</th>
                <th>@Localizer["ComponentLabel"]</th>
                <th>@Localizer["Actions"]</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var component in components)
            {
                <tr>
                    <td class="align-middle">@component.EmbedTitle</td>
                    <td class="align-middle">@component.Label</td>
                    <td class="text-right align-middle">
                        <div class="btn-group">
                            <button type="button" class="btn btn-default dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                @Localizer["Actions"]
                            </button>
                            <div class="dropdown-menu shadow animated--grow-in">
                                <AuthorizeView>
                                    @if (context.User.Authorize(Permissions.Discord.Component.Delete))
                                    {
                                        <a style='margin-right:16px' class="dropdown-item" @onclick='() => DeleteComponent(component)'>@Localizer["Delete"]</a>
                                    }
                                    @if (context.User.Authorize(Permissions.Discord.Component.Edit))
                                    {
                                        <a style='margin-right:16px' class="dropdown-item" data-bs-toggle="modal" data-bs-target="#manageComponent" @onclick='() => LoadComponentData(component)'>@Localizer["EditButton"]</a>
                                    }
                                </AuthorizeView>
                            </div>
                        </div>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
    <AuthorizeView>
        @if (context.User.Authorize(Permissions.Discord.Component.Create))
        {
            <div class="card-footer">
                <button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#manageComponent" @onclick=CreateComponent>@Localizer["AddButton"]</button>
            </div>
        }
    </AuthorizeView>
</div>

<div class="modal fade" id="manageComponent" data-bs-keyboard="false" data-bs-backdrop="static" aria-hidden="true" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Localizer["EditButton"]</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (component != null)
                {
                    <div class="input-group mb-3">
                        <span class="input-group-text">@Localizer["ComponentLabel"]</span>
                        <input type="text" class="form-control" @bind=component.Label>
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">@Localizer["ComponentStyle"]</span>
                        <select class="form-select" @bind=component.ButtonStyle>
                            <option selected>@Localizer["SelectComponentStyle"]</option>
                            @foreach (DiscordButtonStyle style in Enum.GetValues(typeof(DiscordButtonStyle)))
                            {
                                <option value="@((int)style)">@style</option>
                            }
                        </select>
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">@Localizer["ComponentEmote"]</span>
                        <input type="text" class="form-control" @bind=component.Emote>
                    </div>
                    <div class="input-group mb-3">
                        <span class="input-group-text">@Localizer["ComponentUrl"]</span>
                        <input type="text" class="form-control" @bind=component.Url>
                    </div>
                    <div class="form-check form-switch">
                        <input type="checkbox" class="form-check-input" @bind=component.IsEnabled id="isEnabled"/>
                        <label class="form-check-label" for="isEnabled">@Localizer["ComponentEnabled"]</label>
                    </div>
                }
                else
                {
                    @Localizer["AuthorModalText"]
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">@Localizer["ModalClose"]</button>
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="SaveComponent">@Localizer["ModalSubmit"]</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ComponentDataModel> components = null!;
    private ComponentDataModel? component;

    protected override void OnInitialized()
    {
        LoadData();
    }

    private void LoadData()
    {
        components = DataService.GetComponentModels();
    }

    private void CreateComponent()
    {
        component = new ComponentDataModel();
    }

    private void DeleteComponent(ComponentDataModel component)
    {
        DataService.DeleteComponent(component);
        LoadData();
    }

    private void LoadComponentData(ComponentDataModel component)
    {
        this.component = component;
    }

    private void SaveComponent()
    {
        if (component == null) return;
        DataService.SaveComponent(component);
        LoadData();
    }

}